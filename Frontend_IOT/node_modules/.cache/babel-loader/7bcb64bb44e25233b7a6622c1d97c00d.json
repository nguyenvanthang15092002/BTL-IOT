{"ast":null,"code":"var _jsxFileName = \"E:\\\\CongNgheThongTinBk\\\\20221\\\\IotVaUngDung\\\\btl\\\\Nhom10\\\\sourcecode\\\\iot-web-fe\\\\src\\\\screens\\\\Devices\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { toastError, toastSuccess } from \"../../constant/toast\";\nimport { addDeviceByIdFetch, deleteDeviceById, getDeviceById, getUserDevices, updateDeviceByIdFetch } from \"../../services/devicesServices\"; //context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DevicesContext = /*#__PURE__*/createContext({}); //hook\n\nexport const useDevicesContext = () => {\n  _s();\n\n  return useContext(DevicesContext);\n}; //provider\n\n_s(useDevicesContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const DevicesContextProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [listDevices, setListDevices] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  const [deviceItem, setDeviceItem] = useState();\n  const [openAddModal, setOpenAddModal] = useState(false);\n  useEffect(() => {\n    getListDevices();\n  }, []);\n\n  const getListDevices = async () => {\n    const res = await getUserDevices();\n    setListDevices(res === null || res === void 0 ? void 0 : res.devices);\n  };\n\n  const deleteDevice = async id => {\n    const res = await deleteDeviceById(id);\n\n    if (!(res === null || res === void 0 ? void 0 : res.error)) {\n      toastSuccess(\"Delete Complete!\");\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } else {\n      toastError(\"Delete Incomplete!\");\n    }\n  };\n\n  const updateDevice = async (id, name, state) => {\n    let tmp = `{ \"deviceName\": \"${name}\", \"connectState\": \"${state}\" }`;\n    let params = JSON.parse(tmp); // const res = await updateDeviceById(id, params)\n\n    const res = await updateDeviceByIdFetch(id, params);\n\n    if (!(res === null || res === void 0 ? void 0 : res.error)) {\n      toastSuccess(\"Update Complete!\");\n      await getListDevices();\n      window.location.reload();\n    } else {\n      toastError(\"Update Incomplete!\");\n    }\n  };\n\n  const addDevice = async (id, name, state) => {\n    let currentPosition = [];\n    navigator.geolocation.getCurrentPosition(async function (pos) {\n      var _pos$coords, _pos$coords2, _pos$coords3, _pos$coords4;\n\n      currentPosition.push(pos === null || pos === void 0 ? void 0 : (_pos$coords = pos.coords) === null || _pos$coords === void 0 ? void 0 : _pos$coords.latitude);\n      currentPosition.push(pos === null || pos === void 0 ? void 0 : (_pos$coords2 = pos.coords) === null || _pos$coords2 === void 0 ? void 0 : _pos$coords2.longitude);\n      let tmp = `{ \"embedId\": \"${id}\", \"deviceName\": \"${name}\", \"connectState\": \"OFF\"}`;\n      let params = JSON.parse(tmp);\n      params.location = [pos === null || pos === void 0 ? void 0 : (_pos$coords3 = pos.coords) === null || _pos$coords3 === void 0 ? void 0 : _pos$coords3.latitude, pos === null || pos === void 0 ? void 0 : (_pos$coords4 = pos.coords) === null || _pos$coords4 === void 0 ? void 0 : _pos$coords4.longitude];\n      const res = await addDeviceByIdFetch(params);\n\n      if (!(res === null || res === void 0 ? void 0 : res.error)) {\n        toastSuccess(\"Add Complete!\");\n        await getListDevices();\n        window.location.reload();\n      } else {\n        toastError(\"Add Incomplete!\");\n      }\n    });\n  };\n\n  const getDeviceItemById = async id => {\n    let tmp = await getDeviceById(id);\n    if (tmp === null || tmp === void 0 ? void 0 : tmp.device) setDeviceItem(tmp === null || tmp === void 0 ? void 0 : tmp.device);\n  };\n\n  const value = useMemo(() => ({\n    listDevices,\n    getListDevices,\n    deleteDevice,\n    updateDevice,\n    openModal,\n    setOpenModal,\n    getDeviceItemById,\n    deviceItem,\n    openAddModal,\n    setOpenAddModal,\n    addDevice\n  }), // eslint-disable-next-line no-sequences\n  [listDevices, openModal, deviceItem, openAddModal]);\n  return /*#__PURE__*/_jsxDEV(DevicesContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DevicesContextProvider, \"Dam+2oqZqT4gJdv57KIR4pSwYs8=\");\n\n_c = DevicesContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DevicesContextProvider\");","map":{"version":3,"sources":["E:/CongNgheThongTinBk/20221/IotVaUngDung/btl/Nhom10/sourcecode/iot-web-fe/src/screens/Devices/context.js"],"names":["createContext","useContext","useEffect","useMemo","useState","toastError","toastSuccess","addDeviceByIdFetch","deleteDeviceById","getDeviceById","getUserDevices","updateDeviceByIdFetch","DevicesContext","useDevicesContext","DevicesContextProvider","children","listDevices","setListDevices","openModal","setOpenModal","deviceItem","setDeviceItem","openAddModal","setOpenAddModal","getListDevices","res","devices","deleteDevice","id","error","setTimeout","window","location","reload","updateDevice","name","state","tmp","params","JSON","parse","addDevice","currentPosition","navigator","geolocation","getCurrentPosition","pos","push","coords","latitude","longitude","getDeviceItemById","device","value"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,OAA/C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,sBAAzC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,aAA/C,EAA8DC,cAA9D,EAA8EC,qBAA9E,QAA2G,gCAA3G,C,CAEA;;;AACA,OAAO,MAAMC,cAAc,gBAAGZ,aAAa,CAAC,EAAD,CAApC,C,CAEP;;AACA,OAAO,MAAMa,iBAAiB,GAAG;AAAA;;AAAA,SAAMZ,UAAU,CAACW,cAAD,CAAhB;AAAA,CAA1B,C,CAEP;;GAFaC,iB;;AAGb,OAAO,MAAMC,sBAAsB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,EAA5C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,KAAD,CAAhD;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,cAAc;AAEf,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,cAAc,GAAG,YAAY;AACjC,UAAMC,GAAG,GAAG,MAAMf,cAAc,EAAhC;AACAO,IAAAA,cAAc,CAACQ,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEC,OAAN,CAAd;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAG,MAAOC,EAAP,IAAc;AACjC,UAAMH,GAAG,GAAG,MAAMjB,gBAAgB,CAACoB,EAAD,CAAlC;;AACA,QAAI,EAACH,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEI,KAAN,CAAJ,EAAiB;AACfvB,MAAAA,YAAY,CAAC,kBAAD,CAAZ;AACAwB,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KALD,MAKO;AACL5B,MAAAA,UAAU,CAAC,oBAAD,CAAV;AACD;AACF,GAVD;;AAYA,QAAM6B,YAAY,GAAG,OAAON,EAAP,EAAWO,IAAX,EAAiBC,KAAjB,KAA2B;AAC9C,QAAIC,GAAG,GAAI,oBAAmBF,IAAK,uBAAsBC,KAAM,KAA/D;AACA,QAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAb,CAF8C,CAG9C;;AACA,UAAMZ,GAAG,GAAG,MAAMd,qBAAqB,CAACiB,EAAD,EAAKU,MAAL,CAAvC;;AACA,QAAI,EAACb,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEI,KAAN,CAAJ,EAAiB;AACfvB,MAAAA,YAAY,CAAC,kBAAD,CAAZ;AACA,YAAMkB,cAAc,EAApB;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,KAJD,MAIO;AACL5B,MAAAA,UAAU,CAAC,oBAAD,CAAV;AACD;AACF,GAZD;;AAcA,QAAMoC,SAAS,GAAG,OAAOb,EAAP,EAAWO,IAAX,EAAiBC,KAAjB,KAA2B;AAC3C,QAAIM,eAAe,GAAG,EAAtB;AACAC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,gBAAgBC,GAAhB,EAAqB;AAAA;;AAC5DJ,MAAAA,eAAe,CAACK,IAAhB,CAAqBD,GAArB,aAAqBA,GAArB,sCAAqBA,GAAG,CAAEE,MAA1B,gDAAqB,YAAaC,QAAlC;AACAP,MAAAA,eAAe,CAACK,IAAhB,CAAqBD,GAArB,aAAqBA,GAArB,uCAAqBA,GAAG,CAAEE,MAA1B,iDAAqB,aAAaE,SAAlC;AACA,UAAIb,GAAG,GAAI,iBAAgBT,EAAG,qBAAoBO,IAAK,2BAAvD;AACA,UAAIG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAb;AACAC,MAAAA,MAAM,CAACN,QAAP,GAAkB,CAACc,GAAD,aAACA,GAAD,uCAACA,GAAG,CAAEE,MAAN,iDAAC,aAAaC,QAAd,EAAwBH,GAAxB,aAAwBA,GAAxB,uCAAwBA,GAAG,CAAEE,MAA7B,iDAAwB,aAAaE,SAArC,CAAlB;AACA,YAAMzB,GAAG,GAAG,MAAMlB,kBAAkB,CAAC+B,MAAD,CAApC;;AACA,UAAI,EAACb,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEI,KAAN,CAAJ,EAAiB;AACfvB,QAAAA,YAAY,CAAC,eAAD,CAAZ;AACA,cAAMkB,cAAc,EAApB;AACAO,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAJD,MAIO;AACL5B,QAAAA,UAAU,CAAC,iBAAD,CAAV;AACD;AACF,KAdD;AAiBD,GAnBD;;AAqBA,QAAM8C,iBAAiB,GAAG,MAAOvB,EAAP,IAAc;AACtC,QAAIS,GAAG,GAAG,MAAM5B,aAAa,CAACmB,EAAD,CAA7B;AACA,QAAIS,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEe,MAAT,EAAiB/B,aAAa,CAACgB,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEe,MAAN,CAAb;AAClB,GAHD;;AAKA,QAAMC,KAAK,GAAGlD,OAAO,CAAC,OAAO;AAC3Ba,IAAAA,WAD2B;AACdQ,IAAAA,cADc;AACEG,IAAAA,YADF;AACgBO,IAAAA,YADhB;AAC8BhB,IAAAA,SAD9B;AAE3BC,IAAAA,YAF2B;AAEbgC,IAAAA,iBAFa;AAEM/B,IAAAA,UAFN;AAEkBE,IAAAA,YAFlB;AAEgCC,IAAAA,eAFhC;AAEiDkB,IAAAA;AAFjD,GAAP,CAAD,EAInB;AACA,GAACzB,WAAD,EAAcE,SAAd,EAAyBE,UAAzB,EAAqCE,YAArC,CALmB,CAArB;AAMA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE+B,KAAhC;AAAA,cACGtC;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhFM;;IAAMD,sB;;KAAAA,sB","sourcesContent":["import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { toastError, toastSuccess } from \"../../constant/toast\";\r\nimport { addDeviceByIdFetch, deleteDeviceById, getDeviceById, getUserDevices, updateDeviceByIdFetch } from \"../../services/devicesServices\";\r\n\r\n//context\r\nexport const DevicesContext = createContext({})\r\n\r\n//hook\r\nexport const useDevicesContext = () => useContext(DevicesContext)\r\n\r\n//provider\r\nexport const DevicesContextProvider = ({ children }) => {\r\n  const [listDevices, setListDevices] = useState([])\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const [deviceItem, setDeviceItem] = useState()\r\n  const [openAddModal, setOpenAddModal] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    getListDevices()\r\n\r\n  }, [])\r\n\r\n  const getListDevices = async () => {\r\n    const res = await getUserDevices()\r\n    setListDevices(res?.devices)\r\n  }\r\n\r\n  const deleteDevice = async (id) => {\r\n    const res = await deleteDeviceById(id)\r\n    if (!res?.error) {\r\n      toastSuccess(\"Delete Complete!\")\r\n      setTimeout(() => {\r\n        window.location.reload()\r\n      }, 2000);\r\n    } else {\r\n      toastError(\"Delete Incomplete!\")\r\n    }\r\n  }\r\n\r\n  const updateDevice = async (id, name, state) => {\r\n    let tmp = `{ \"deviceName\": \"${name}\", \"connectState\": \"${state}\" }`\r\n    let params = JSON.parse(tmp)\r\n    // const res = await updateDeviceById(id, params)\r\n    const res = await updateDeviceByIdFetch(id, params)\r\n    if (!res?.error) {\r\n      toastSuccess(\"Update Complete!\")\r\n      await getListDevices()\r\n      window.location.reload()\r\n    } else {\r\n      toastError(\"Update Incomplete!\")\r\n    }\r\n  }\r\n\r\n  const addDevice = async (id, name, state) => {\r\n    let currentPosition = []\r\n    navigator.geolocation.getCurrentPosition(async function (pos) {\r\n      currentPosition.push(pos?.coords?.latitude)\r\n      currentPosition.push(pos?.coords?.longitude)\r\n      let tmp = `{ \"embedId\": \"${id}\", \"deviceName\": \"${name}\", \"connectState\": \"OFF\"}`\r\n      let params = JSON.parse(tmp)\r\n      params.location = [pos?.coords?.latitude, pos?.coords?.longitude]\r\n      const res = await addDeviceByIdFetch(params)\r\n      if (!res?.error) {\r\n        toastSuccess(\"Add Complete!\")\r\n        await getListDevices()\r\n        window.location.reload()\r\n      } else {\r\n        toastError(\"Add Incomplete!\")\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  const getDeviceItemById = async (id) => {\r\n    let tmp = await getDeviceById(id)\r\n    if (tmp?.device) setDeviceItem(tmp?.device)\r\n  }\r\n\r\n  const value = useMemo(() => ({\r\n    listDevices, getListDevices, deleteDevice, updateDevice, openModal,\r\n    setOpenModal, getDeviceItemById, deviceItem, openAddModal, setOpenAddModal, addDevice\r\n  }),\r\n    // eslint-disable-next-line no-sequences\r\n    [listDevices, openModal, deviceItem, openAddModal])\r\n  return (\r\n    <DevicesContext.Provider value={value}>\r\n      {children}\r\n    </DevicesContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}