{"ast":null,"code":"var _jsxFileName = \"E:\\\\CongNgheThongTinBk\\\\20221\\\\Project_3\\\\iot-btl\\\\client\\\\src\\\\screens\\\\HomePage\\\\context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { getListCities, getNearestCity, getSpecializedCity } from \"../../services/airVisualService\";\n\n//context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MapContext = /*#__PURE__*/createContext({});\n\n//hook\nexport const useMapContext = () => {\n  _s();\n  return useContext(MapContext);\n};\n\n//provider\n_s(useMapContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const MapContextProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [geocodingCity, setGeocodingCity] = useState([]);\n  const [nearestCity, setNearestCity] = useState();\n  const getCitiesLocation = async () => {\n    let listInfoCity = (await getListCities(\"Hanoi\", \"Vietnam\")) || [];\n    let promise = listInfoCity === null || listInfoCity === void 0 ? void 0 : listInfoCity.map(item => getSpecializedCity(item === null || item === void 0 ? void 0 : item.city, \"Hanoi\", \"Vietnam\"));\n    let tmpParam = await Promise.all(promise);\n    console.log(tmpParam);\n    setGeocodingCity(tmpParam);\n  };\n  const infoNearestCity = async () => {\n    let info = await getNearestCity();\n    setNearestCity(info);\n  };\n  const fetchData = async () => {\n    getCitiesLocation();\n    infoNearestCity();\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const value = useMemo(() => ({\n    geocodingCity,\n    nearestCity\n  }),\n  // eslint-disable-next-line no-sequences\n  [geocodingCity, nearestCity]);\n  return /*#__PURE__*/_jsxDEV(MapContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapContextProvider, \"1wrIsnrLbowV263q7gR5PhI6Igs=\");\n_c = MapContextProvider;\nvar _c;\n$RefreshReg$(_c, \"MapContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useMemo","useState","getListCities","getNearestCity","getSpecializedCity","MapContext","useMapContext","MapContextProvider","children","geocodingCity","setGeocodingCity","nearestCity","setNearestCity","getCitiesLocation","listInfoCity","promise","map","item","city","tmpParam","Promise","all","console","log","infoNearestCity","info","fetchData","value"],"sources":["E:/CongNgheThongTinBk/20221/Project_3/iot-btl/client/src/screens/HomePage/context.js"],"sourcesContent":["import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { getListCities, getNearestCity, getSpecializedCity } from \"../../services/airVisualService\";\r\n\r\n//context\r\nexport const MapContext = createContext({})\r\n\r\n//hook\r\nexport const useMapContext = () => useContext(MapContext)\r\n\r\n//provider\r\nexport const MapContextProvider = ({ children }) => {\r\n  const [geocodingCity, setGeocodingCity] = useState([])\r\n  const [nearestCity, setNearestCity] = useState()\r\n\r\n  const getCitiesLocation = async () => {\r\n\r\n    let listInfoCity = await getListCities(\"Hanoi\", \"Vietnam\") || []\r\n\r\n    let promise = listInfoCity?.map((item) => getSpecializedCity(item?.city, \"Hanoi\", \"Vietnam\"))\r\n\r\n    let tmpParam = await Promise.all(promise)\r\n    console.log(tmpParam)\r\n    setGeocodingCity(tmpParam)\r\n  }\r\n\r\n  const infoNearestCity = async () => {\r\n    let info = await getNearestCity()\r\n    setNearestCity(info)\r\n\r\n  }\r\n\r\n  const fetchData = async () => {\r\n    getCitiesLocation()\r\n    infoNearestCity()\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    fetchData()\r\n  }, [])\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const value = useMemo(() => ({\r\n    geocodingCity, nearestCity\r\n  }),\r\n    // eslint-disable-next-line no-sequences\r\n    [geocodingCity, nearestCity])\r\n  return (\r\n    <MapContext.Provider value={value}>\r\n      {children}\r\n    </MapContext.Provider>\r\n  )\r\n}\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC/E,SAASC,aAAa,EAAEC,cAAc,EAAEC,kBAAkB,QAAQ,iCAAiC;;AAEnG;AAAA;AACA,OAAO,MAAMC,UAAU,gBAAGR,aAAa,CAAC,CAAC,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMS,aAAa,GAAG;EAAA;EAAA,OAAMR,UAAU,CAACO,UAAU,CAAC;AAAA;;AAEzD;AAAA,GAFaC,aAAa;AAG1B,OAAO,MAAMC,kBAAkB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC7C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,EAAE;EAEhD,MAAMY,iBAAiB,GAAG,YAAY;IAEpC,IAAIC,YAAY,GAAG,OAAMZ,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,KAAI,EAAE;IAEhE,IAAIa,OAAO,GAAGD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,GAAG,CAAEC,IAAI,IAAKb,kBAAkB,CAACa,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,IAAI,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAE7F,IAAIC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;IACzCO,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrBT,gBAAgB,CAACS,QAAQ,CAAC;EAC5B,CAAC;EAED,MAAMK,eAAe,GAAG,YAAY;IAClC,IAAIC,IAAI,GAAG,MAAMtB,cAAc,EAAE;IACjCS,cAAc,CAACa,IAAI,CAAC;EAEtB,CAAC;EAED,MAAMC,SAAS,GAAG,YAAY;IAC5Bb,iBAAiB,EAAE;IACnBW,eAAe,EAAE;EAEnB,CAAC;EAGDzB,SAAS,CAAC,MAAM;IAEd2B,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EACN;EACA,MAAMC,KAAK,GAAG3B,OAAO,CAAC,OAAO;IAC3BS,aAAa;IAAEE;EACjB,CAAC,CAAC;EACA;EACA,CAACF,aAAa,EAAEE,WAAW,CAAC,CAAC;EAC/B,oBACE,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAEgB,KAAM;IAAA,UAC/BnB;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAE1B,CAAC;AAAA,IA3CYD,kBAAkB;AAAA,KAAlBA,kBAAkB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}