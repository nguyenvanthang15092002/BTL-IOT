{"ast":null,"code":"const INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n    oldHandler.call(this, ev);\n  };\n}\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n    if (!this.pressed) {\n      return;\n    }\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","map":{"version":3,"mappings":"AAMA,MAAMA,WAAW,GAAG,CAApB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,eAAe,GAAG;EACtBC,SAAS,EAAEJ,WADW;EAEtBK,SAAS,EAAEJ,UAFW;EAGtBK,OAAO,EAAEJ;AAHa,CAAxB;AAYA,SAASK,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8B;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAID,OAAO,CAACD,KAAK,CAACE,CAAD,CAAN,CAAX,EAAuB;MACrB,OAAO,IAAP;IACD;EACF;EACD,OAAO,KAAP;AACD;AAGD,OAAO,SAASE,wBAAT,CAAkCC,iBAAlC,EAAqD;EAC1D,MAAMC,UAAU,GAAGD,iBAAiB,CAACE,SAAlB,CAA4BC,OAA/C;EAGAH,iBAAiB,CAACE,SAAlB,CAA4BC,OAA5B,GAAsC,SAASA,OAAT,CAAiBC,EAAjB,EAAqB;IACzD,MAAMC,KAAK,GAAG,KAAKA,KAAnB;IAGA,IAAID,EAAE,CAACE,MAAH,GAAY,CAAZ,IAAiBF,EAAE,CAACG,IAAH,KAAY,aAAjC,EAAgD;MAC9C,IAAI,CAACb,IAAI,CAACW,KAAD,EAAQG,CAAC,IAAIA,CAAC,CAACC,SAAF,KAAgBL,EAAE,CAACK,SAAhC,CAAT,EAAqD;QACnDJ,KAAK,CAACK,IAAN,CAAWN,EAAX;MACD;IACF;IAEDH,UAAU,CAACU,IAAX,CAAgB,IAAhB,EAAsBP,EAAtB;EACD,CAXD;AAYD;AAGD,OAAO,SAASQ,iBAAT,CAA2BC,UAA3B,EAAuC;EAC5CA,UAAU,CAACX,SAAX,CAAqBC,OAArB,GAA+B,SAASA,OAAT,CAAiBC,EAAjB,EAAqB;IAClD,IAAIU,SAAS,GAAGxB,eAAe,CAACc,EAAE,CAACG,IAAJ,CAA/B;IAGA,IAAIO,SAAS,GAAG3B,WAAZ,IAA2BiB,EAAE,CAACE,MAAH,IAAa,CAA5C,EAA+C;MAC7C,KAAKS,OAAL,GAAe,IAAf;IACD;IAED,IAAID,SAAS,GAAG1B,UAAZ,IAA0BgB,EAAE,CAACY,KAAH,KAAa,CAA3C,EAA8C;MAC5CF,SAAS,GAAGzB,SAAZ;IACD;IAGD,IAAI,CAAC,KAAK0B,OAAV,EAAmB;MACjB;IACD;IAED,IAAID,SAAS,GAAGzB,SAAhB,EAA2B;MACzB,KAAK0B,OAAL,GAAe,KAAf;IACD;IAED,KAAKE,QAAL,CAAc,KAAKC,OAAnB,EAA4BJ,SAA5B,EAAuC;MACrCK,QAAQ,EAAE,CAACf,EAAD,CAD2B;MAErCgB,eAAe,EAAE,CAAChB,EAAD,CAFoB;MAGrCiB,WAAW,EAAE,OAHwB;MAIrCC,QAAQ,EAAElB;IAJ2B,CAAvC;EAMD,CA3BD;AA4BD","names":["INPUT_START","INPUT_MOVE","INPUT_END","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","some","array","predict","i","length","enhancePointerEventInput","PointerEventInput","oldHandler","prototype","handler","ev","store","button","type","e","pointerId","push","call","enhanceMouseInput","MouseInput","eventType","pressed","which","callback","manager","pointers","changedPointers","pointerType","srcEvent"],"sources":["../../../src/utils/hammer-overrides.js"],"sourcesContent":["/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n\n  // overrides PointerEventInput.handler to accept right mouse button\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n\n    // Allow non-left mouse buttons through\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n}\n\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n\n    // on start we want to have the mouse button down\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n\n    // mouse must be down\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}