{"ast":null,"code":"export const iDate = (date, stringFormat) => {\n  try {\n    let t;\n\n    if (/(^\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2}$)/.test(date)) {\n      date = (date || '').split(/\\D+/) || [];\n      date[1] = Number(date[1]) - 1;\n      t = new Date(...date);\n    } else {\n      t = new Date(date || new Date());\n    }\n\n    if (!t.getDate()) {\n      return '';\n    }\n\n    const s = Number(t);\n    const h = t.getHours();\n    const o = {\n      D: t.getDay(),\n      // index ngày trong tuần (number)\n      H: t.getHours(),\n      // giờ (number/H)\n      J: t.getDate(),\n      // ngày trong tháng (number)\n      M: t.getMinutes(),\n      // phút (number/M)\n      N: t.getMonth() + 1,\n      // tháng Việt Nam (number)\n      O: t,\n      // (Date)\n      S: t.getSeconds(),\n      // giây (number)\n      d: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][t.getDay()],\n      // thứ Việt nam (String)\n      f: t.getFullYear(),\n      // năm (number)\n      h: ('0' + t.getHours()).substr(-2),\n      // giờ (String)\n      j: ('0' + t.getDate()).substr(-2),\n      // ngày (String)\n      m: ('0' + t.getMinutes()).substr(-2),\n      // phút (String)\n      n: ('0' + (t.getMonth() + 1)).substr(-2),\n      // tháng (String)\n      s: ('0' + t.getSeconds()).substr(-2),\n      // giây (String)\n      t: s,\n      // mls (number)\n      u: parseInt(s / 1000),\n      // timestamp (number)\n      y: String(t.getFullYear()).substr(-2),\n      // 2 số cuối của năm (String)\n      A: t.getHours() >= 12 ? 'PM' : 'AM',\n      // AM PM                 t>new Date (t.getFullYear,t.getMonth(),t.getDate,12,\"01\",\"00\")\n      g: ('0' + (h === 0 ? 12 : h > 12 ? h - 12 : h)).substr(-2),\n      // Trả về định dạng 12 giờ\n      Month: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][t.getMonth()],\n      Mo: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][t.getMonth()]\n    };\n\n    if (typeof stringFormat === 'string') {\n      return stringFormat.replace(/{(Mo|Month|.)}/g, a => o[a.replace(/[{}]/g, '')]);\n    }\n\n    return o;\n  } catch (error) {\n    return date;\n  }\n};","map":{"version":3,"sources":["E:/CongNgheThongTinBk/20221/IotVaUngDung/btl/Nhom10/sourcecode/iot-web-fe/src/utils/iDate.js"],"names":["iDate","date","stringFormat","t","test","split","Number","Date","getDate","s","h","getHours","o","D","getDay","H","J","M","getMinutes","N","getMonth","O","S","getSeconds","d","f","getFullYear","substr","j","m","n","u","parseInt","y","String","A","g","Month","Mo","replace","a","error"],"mappings":"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","sourcesContent":["export const iDate = (date, stringFormat) => {\r\n  try {\r\n    let t\r\n    if (/(^\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2}$)/.test(date)) {\r\n      date = (date || '').split(/\\D+/) || []\r\n      date[1] = Number(date[1]) - 1\r\n      t = new Date(...date)\r\n    } else {\r\n      t = new Date(date || new Date())\r\n    }\r\n\r\n    if (!t.getDate()) {\r\n      return ''\r\n    }\r\n\r\n    const s = Number(t)\r\n    const h = t.getHours()\r\n    const o = {\r\n      D: t.getDay(), // index ngày trong tuần (number)\r\n      H: t.getHours(), // giờ (number/H)\r\n      J: t.getDate(), // ngày trong tháng (number)\r\n      M: t.getMinutes(), // phút (number/M)\r\n      N: t.getMonth() + 1, // tháng Việt Nam (number)\r\n      O: t, // (Date)\r\n      S: t.getSeconds(), // giây (number)\r\n      d: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][t.getDay()], // thứ Việt nam (String)\r\n      f: t.getFullYear(), // năm (number)\r\n      h: ('0' + t.getHours()).substr(-2), // giờ (String)\r\n      j: ('0' + t.getDate()).substr(-2), // ngày (String)\r\n      m: ('0' + t.getMinutes()).substr(-2), // phút (String)\r\n      n: ('0' + (t.getMonth() + 1)).substr(-2), // tháng (String)\r\n      s: ('0' + t.getSeconds()).substr(-2), // giây (String)\r\n      t: s, // mls (number)\r\n      u: parseInt(s / 1000), // timestamp (number)\r\n      y: String(t.getFullYear()).substr(-2), // 2 số cuối của năm (String)\r\n      A: t.getHours() >= 12 ? 'PM' : 'AM', // AM PM                 t>new Date (t.getFullYear,t.getMonth(),t.getDate,12,\"01\",\"00\")\r\n      g: ('0' + (h === 0 ? 12 : h > 12 ? h - 12 : h)).substr(-2), // Trả về định dạng 12 giờ\r\n      Month: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ][t.getMonth()],\r\n      Mo: [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n      ][t.getMonth()],\r\n    }\r\n    if (typeof stringFormat === 'string') {\r\n      return stringFormat.replace(\r\n        /{(Mo|Month|.)}/g,\r\n        (a) => o[a.replace(/[{}]/g, '')]\r\n      )\r\n    }\r\n\r\n    return o\r\n  } catch (error) {\r\n    return date\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}