{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n    B = v[0] * w[2] - v[2] * w[0],\n    C = v[0] * w[3] - v[3] * w[0],\n    D = v[1] * w[2] - v[2] * w[1],\n    E = v[1] * w[3] - v[3] * w[1],\n    F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n    y = a[1],\n    z = a[2];\n  var qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 4;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n    return a;\n  };\n}();","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","z","w","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","hypot","squaredDistance","length","squaredLength","negate","inverse","normalize","len","sqrt","dot","cross","u","v","A","B","C","D","E","F","G","H","I","J","lerp","t","ax","ay","az","aw","random","v1","v2","v3","v4","s1","s2","RANDOM","d","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","zero","str","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"sources":["D:/SOFTWARE/Coder IT/IOT_Project/Frontend_IOT/node_modules/@math.gl/web-mercator/node_modules/gl-matrix/esm/vec4.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = x * len;\r\n  out[1] = y * len;\r\n  out[2] = z * len;\r\n  out[3] = w * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\r\n\r\nexport function cross(out, u, v, w) {\r\n  var A = v[0] * w[1] - v[1] * w[0],\r\n      B = v[0] * w[2] - v[2] * w[0],\r\n      C = v[0] * w[3] - v[3] * w[0],\r\n      D = v[1] * w[2] - v[2] * w[1],\r\n      E = v[1] * w[3] - v[3] * w[1],\r\n      F = v[2] * w[3] - v[3] * w[2];\r\n  var G = u[0];\r\n  var H = u[1];\r\n  var I = u[2];\r\n  var J = u[3];\r\n  out[0] = H * F - I * E + J * D;\r\n  out[1] = -(G * F) + I * C - J * B;\r\n  out[2] = G * E - H * C + J * A;\r\n  out[3] = -(G * D) + H * B - I * A;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3]; // calculate quat * vec\r\n\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\r\n\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\nexport function str(a) {\r\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\n\r\nexport var div = divide;\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\n\r\nexport var dist = distance;\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\n\r\nexport var sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexport var forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n      a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}