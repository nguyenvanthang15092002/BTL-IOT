{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    var a12 = a[6],\n      a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  var a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  var a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  var a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n    y = v[1],\n    z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n    y = v[1],\n    z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n    y = axis[1],\n    z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n    y = axis[1],\n    z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n    nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n    eyey = eye[1],\n    eyez = eye[2],\n    upx = up[0],\n    upy = up[1],\n    upz = up[2];\n  var z0 = eyex - target[0],\n    z1 = eyey - target[1],\n    z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n  var x0 = upy * z2 - upz * z1,\n    x1 = upz * z0 - upx * z2,\n    x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  var a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  var a8 = a[8],\n    a9 = a[9],\n    a10 = a[10],\n    a11 = a[11];\n  var a12 = a[12],\n    a13 = a[13],\n    a14 = a[14],\n    a15 = a[15];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  var b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  var b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11];\n  var b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","scale","rotate","rad","axis","len","Math","hypot","s","c","t","b12","b20","b21","b22","EPSILON","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub"],"sources":["E:/CongNgheThongTinBk/20221/IotVaUngDung/btl/Nhom10/sourcecode/iot-web-fe/node_modules/@math.gl/web-mercator/node_modules/gl-matrix/esm/mat4.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;"],"mappings":"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"},"metadata":{},"sourceType":"module"}