{"ast":null,"code":"var _jsxFileName = \"E:\\\\CongNgheThongTinBk\\\\20221\\\\IotVaUngDung\\\\btl\\\\Nhom10\\\\sourcecode\\\\iot-web-fe\\\\src\\\\screens\\\\HomePage\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { getListCities, getNearestCity, getSpecializedCity } from \"../../services/airVisualService\"; //context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MapContext = /*#__PURE__*/createContext({}); //hook\n\nexport const useMapContext = () => {\n  _s();\n\n  return useContext(MapContext);\n}; //provider\n\n_s(useMapContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const MapContextProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [geocodingCity, setGeocodingCity] = useState([]);\n  const [nearestCity, setNearestCity] = useState();\n\n  const getCitiesLocation = async () => {\n    let listInfoCity = (await getListCities(\"Hanoi\", \"Vietnam\")) || [];\n    let promise = listInfoCity === null || listInfoCity === void 0 ? void 0 : listInfoCity.map(item => getSpecializedCity(item === null || item === void 0 ? void 0 : item.city, \"Hanoi\", \"Vietnam\"));\n    let tmpParam = await Promise.all(promise);\n    setGeocodingCity(tmpParam);\n  };\n\n  const infoNearestCity = async () => {\n    let info = await getNearestCity();\n    setNearestCity(info);\n  };\n\n  const fetchData = async () => {\n    getCitiesLocation();\n    infoNearestCity();\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const value = useMemo(() => ({\n    geocodingCity,\n    nearestCity\n  }), // eslint-disable-next-line no-sequences\n  [geocodingCity, nearestCity]);\n  return /*#__PURE__*/_jsxDEV(MapContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MapContextProvider, \"1wrIsnrLbowV263q7gR5PhI6Igs=\");\n\n_c = MapContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContextProvider\");","map":{"version":3,"sources":["E:/CongNgheThongTinBk/20221/IotVaUngDung/btl/Nhom10/sourcecode/iot-web-fe/src/screens/HomePage/context.js"],"names":["createContext","useContext","useEffect","useMemo","useState","getListCities","getNearestCity","getSpecializedCity","MapContext","useMapContext","MapContextProvider","children","geocodingCity","setGeocodingCity","nearestCity","setNearestCity","getCitiesLocation","listInfoCity","promise","map","item","city","tmpParam","Promise","all","infoNearestCity","info","fetchData","value"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,OAA/C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,kBAAxC,QAAkE,iCAAlE,C,CAEA;;;AACA,OAAO,MAAMC,UAAU,gBAAGR,aAAa,CAAC,EAAD,CAAhC,C,CAEP;;AACA,OAAO,MAAMS,aAAa,GAAG;AAAA;;AAAA,SAAMR,UAAU,CAACO,UAAD,CAAhB;AAAA,CAAtB,C,CAEP;;GAFaC,a;;AAGb,OAAO,MAAMC,kBAAkB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,EAA9C;;AAEA,QAAMY,iBAAiB,GAAG,YAAY;AAEpC,QAAIC,YAAY,GAAG,OAAMZ,aAAa,CAAC,OAAD,EAAU,SAAV,CAAnB,KAA2C,EAA9D;AAEA,QAAIa,OAAO,GAAGD,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEE,GAAd,CAAmBC,IAAD,IAAUb,kBAAkB,CAACa,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEC,IAAP,EAAa,OAAb,EAAsB,SAAtB,CAA9C,CAAd;AAEA,QAAIC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYN,OAAZ,CAArB;AACAL,IAAAA,gBAAgB,CAACS,QAAD,CAAhB;AACD,GARD;;AAUA,QAAMG,eAAe,GAAG,YAAY;AAClC,QAAIC,IAAI,GAAG,MAAMpB,cAAc,EAA/B;AACAS,IAAAA,cAAc,CAACW,IAAD,CAAd;AAED,GAJD;;AAMA,QAAMC,SAAS,GAAG,YAAY;AAC5BX,IAAAA,iBAAiB;AACjBS,IAAAA,eAAe;AAEhB,GAJD;;AAOAvB,EAAAA,SAAS,CAAC,MAAM;AAEdyB,IAAAA,SAAS;AACV,GAHQ,EAGN,EAHM,CAAT,CA3BkD,CA+BlD;;AACA,QAAMC,KAAK,GAAGzB,OAAO,CAAC,OAAO;AAC3BS,IAAAA,aAD2B;AACZE,IAAAA;AADY,GAAP,CAAD,EAGnB;AACA,GAACF,aAAD,EAAgBE,WAAhB,CAJmB,CAArB;AAKA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEc,KAA5B;AAAA,cACGjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1CM;;IAAMD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { getListCities, getNearestCity, getSpecializedCity } from \"../../services/airVisualService\";\r\n\r\n//context\r\nexport const MapContext = createContext({})\r\n\r\n//hook\r\nexport const useMapContext = () => useContext(MapContext)\r\n\r\n//provider\r\nexport const MapContextProvider = ({ children }) => {\r\n  const [geocodingCity, setGeocodingCity] = useState([])\r\n  const [nearestCity, setNearestCity] = useState()\r\n\r\n  const getCitiesLocation = async () => {\r\n\r\n    let listInfoCity = await getListCities(\"Hanoi\", \"Vietnam\") || []\r\n\r\n    let promise = listInfoCity?.map((item) => getSpecializedCity(item?.city, \"Hanoi\", \"Vietnam\"))\r\n\r\n    let tmpParam = await Promise.all(promise)\r\n    setGeocodingCity(tmpParam)\r\n  }\r\n\r\n  const infoNearestCity = async () => {\r\n    let info = await getNearestCity()\r\n    setNearestCity(info)\r\n\r\n  }\r\n\r\n  const fetchData = async () => {\r\n    getCitiesLocation()\r\n    infoNearestCity()\r\n\r\n  }\r\n\r\n  \r\n  useEffect(() => {\r\n\r\n    fetchData()\r\n  }, [])\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const value = useMemo(() => ({\r\n    geocodingCity, nearestCity\r\n  }),\r\n    // eslint-disable-next-line no-sequences\r\n    [geocodingCity, nearestCity])\r\n  return (\r\n    <MapContext.Provider value={value}>\r\n      {children}\r\n    </MapContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}