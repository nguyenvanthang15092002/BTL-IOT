{"ast":null,"code":"import { getAsync } from \"../constant/request\";\nlet baseUrl = 'http://api.airvisual.com/v2';\nlet keyString = `key=${process.env.REACT_APP_MAP_AIR_VISUAL_TOKEN}`;\nexport async function getListCountries() {\n  let url = baseUrl + `/countries?` + keyString;\n  const response = await getAsync(url);\n  return (response === null || response === void 0 ? void 0 : response.data) || [];\n}\nexport async function getListStates(countryName) {\n  let url = baseUrl + `/states?country=${countryName}&` + keyString;\n  const response = await getAsync(url);\n  return (response === null || response === void 0 ? void 0 : response.data) || [];\n}\nexport async function getListCities(stateName, countryName) {\n  var _response$data;\n  let url = baseUrl + `/cities?state=${stateName}&country=${countryName}&` + keyString;\n  const response = await getAsync(url);\n  return (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data) || [];\n}\nexport async function getSpecializedCity(cityName, stateName, countryName) {\n  let url = baseUrl + `/city?city=${cityName}&state=${stateName}&country=${countryName}&` + keyString;\n  const response = await getAsync(url);\n  return (response === null || response === void 0 ? void 0 : response.data) || [];\n}\nexport async function getRank() {\n  //enterprise\n  let url = baseUrl + `/city_ranking&` + keyString;\n  const response = await getAsync(url);\n  return (response === null || response === void 0 ? void 0 : response.data) || [];\n}\nexport async function getNearestCity() {\n  var _response$data2;\n  let url = baseUrl + `/nearest_city?` + keyString;\n  const response = await getAsync(url);\n  return (response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.data) || {};\n}","map":{"version":3,"names":["getAsync","baseUrl","keyString","process","env","REACT_APP_MAP_AIR_VISUAL_TOKEN","getListCountries","url","response","data","getListStates","countryName","getListCities","stateName","getSpecializedCity","cityName","getRank","getNearestCity"],"sources":["E:/CongNgheThongTinBk/20221/IotVaUngDung/btl/Nhom10/sourcecode/iot-web-fe/src/services/airVisualService.js"],"sourcesContent":["import { getAsync } from \"../constant/request\";\r\n\r\nlet baseUrl = 'http://api.airvisual.com/v2'\r\nlet keyString = `key=${process.env.REACT_APP_MAP_AIR_VISUAL_TOKEN}`\r\nexport async function getListCountries() {\r\n  let url = baseUrl + `/countries?` + keyString\r\n  const response = await getAsync(url);\r\n  return response?.data || []\r\n}\r\n\r\nexport async function getListStates(countryName) {\r\n  let url = baseUrl + `/states?country=${countryName}&` + keyString\r\n  const response = await getAsync(url);\r\n  return response?.data || []\r\n}\r\n\r\nexport async function getListCities(stateName, countryName) {\r\n  let url = baseUrl + `/cities?state=${stateName}&country=${countryName}&` + keyString\r\n  const response = await getAsync(url);\r\n  return response?.data?.data || []\r\n}\r\n\r\nexport async function getSpecializedCity(cityName, stateName, countryName) {\r\n  let url = baseUrl + `/city?city=${cityName}&state=${stateName}&country=${countryName}&` + keyString\r\n  const response = await getAsync(url);\r\n  return response?.data || []\r\n}\r\n\r\nexport async function getRank() { //enterprise\r\n  let url = baseUrl + `/city_ranking&` + keyString\r\n  const response = await getAsync(url);\r\n  return response?.data || []\r\n\r\n}\r\n\r\nexport async function getNearestCity() {\r\n  let url = baseUrl + `/nearest_city?` + keyString\r\n  const response = await getAsync(url);\r\n  return response?.data?.data || {}\r\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAE9C,IAAIC,OAAO,GAAG,6BAA6B;AAC3C,IAAIC,SAAS,GAAI,OAAMC,OAAO,CAACC,GAAG,CAACC,8BAA+B,EAAC;AACnE,OAAO,eAAeC,gBAAgB,GAAG;EACvC,IAAIC,GAAG,GAAGN,OAAO,GAAI,aAAY,GAAGC,SAAS;EAC7C,MAAMM,QAAQ,GAAG,MAAMR,QAAQ,CAACO,GAAG,CAAC;EACpC,OAAO,CAAAC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,KAAI,EAAE;AAC7B;AAEA,OAAO,eAAeC,aAAa,CAACC,WAAW,EAAE;EAC/C,IAAIJ,GAAG,GAAGN,OAAO,GAAI,mBAAkBU,WAAY,GAAE,GAAGT,SAAS;EACjE,MAAMM,QAAQ,GAAG,MAAMR,QAAQ,CAACO,GAAG,CAAC;EACpC,OAAO,CAAAC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,KAAI,EAAE;AAC7B;AAEA,OAAO,eAAeG,aAAa,CAACC,SAAS,EAAEF,WAAW,EAAE;EAAA;EAC1D,IAAIJ,GAAG,GAAGN,OAAO,GAAI,iBAAgBY,SAAU,YAAWF,WAAY,GAAE,GAAGT,SAAS;EACpF,MAAMM,QAAQ,GAAG,MAAMR,QAAQ,CAACO,GAAG,CAAC;EACpC,OAAO,CAAAC,QAAQ,aAARA,QAAQ,yCAARA,QAAQ,CAAEC,IAAI,mDAAd,eAAgBA,IAAI,KAAI,EAAE;AACnC;AAEA,OAAO,eAAeK,kBAAkB,CAACC,QAAQ,EAAEF,SAAS,EAAEF,WAAW,EAAE;EACzE,IAAIJ,GAAG,GAAGN,OAAO,GAAI,cAAac,QAAS,UAASF,SAAU,YAAWF,WAAY,GAAE,GAAGT,SAAS;EACnG,MAAMM,QAAQ,GAAG,MAAMR,QAAQ,CAACO,GAAG,CAAC;EACpC,OAAO,CAAAC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,KAAI,EAAE;AAC7B;AAEA,OAAO,eAAeO,OAAO,GAAG;EAAE;EAChC,IAAIT,GAAG,GAAGN,OAAO,GAAI,gBAAe,GAAGC,SAAS;EAChD,MAAMM,QAAQ,GAAG,MAAMR,QAAQ,CAACO,GAAG,CAAC;EACpC,OAAO,CAAAC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,KAAI,EAAE;AAE7B;AAEA,OAAO,eAAeQ,cAAc,GAAG;EAAA;EACrC,IAAIV,GAAG,GAAGN,OAAO,GAAI,gBAAe,GAAGC,SAAS;EAChD,MAAMM,QAAQ,GAAG,MAAMR,QAAQ,CAACO,GAAG,CAAC;EACpC,OAAO,CAAAC,QAAQ,aAARA,QAAQ,0CAARA,QAAQ,CAAEC,IAAI,oDAAd,gBAAgBA,IAAI,KAAI,CAAC,CAAC;AACnC"},"metadata":{},"sourceType":"module"}