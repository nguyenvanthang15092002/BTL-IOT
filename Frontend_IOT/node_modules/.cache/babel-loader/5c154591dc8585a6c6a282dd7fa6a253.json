{"ast":null,"code":"const EVENT_TYPE = 'contextmenu';\nexport default class ContextmenuInput {\n  constructor(element, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n}","map":{"version":3,"mappings":"AAoBA,MAAMA,UAAU,GAAG,aAAnB;AAEA,eAAe,MAAMC,gBAAN,CAAuB;EACpCC,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAkC;IAAA,IAAdC,OAAO,uEAAG,EAA9B;IACT,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IAEA,KAAKC,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc;MAACC,MAAM,EAAE;IAAT,CAAd,EAA8BH,OAA9B,CAAf;IAEA,KAAKI,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;IACAP,OAAO,CAACQ,gBAAR,CAAyB,aAAzB,EAAwC,KAAKF,WAA7C;EACD;EAEDG,OAAO,GAAG;IACR,KAAKT,OAAL,CAAaU,mBAAb,CAAiC,aAAjC,EAAgD,KAAKJ,WAArD;EACD;EAMDK,eAAe,CAACC,SAAD,EAAYC,OAAZ,EAAqB;IAClC,IAAID,SAAS,KAAKf,UAAlB,EAA8B;MAC5B,KAAKK,OAAL,CAAaG,MAAb,GAAsBQ,OAAtB;IACD;EACF;EAEDP,WAAW,CAACQ,KAAD,EAAQ;IACjB,IAAI,CAAC,KAAKZ,OAAL,CAAaG,MAAlB,EAA0B;MACxB;IACD;IAED,KAAKJ,QAAL,CAAc;MACZc,IAAI,EAAElB,UADM;MAEZmB,MAAM,EAAE;QACNC,CAAC,EAAEH,KAAK,CAACI,OADH;QAENC,CAAC,EAAEL,KAAK,CAACM;MAFH,CAFI;MAMZC,QAAQ,EAAEP,KANE;MAOZQ,WAAW,EAAE,OAPD;MAQZC,MAAM,EAAET,KAAK,CAACS;IARF,CAAd;EAUD;AAxCmC","names":["EVENT_TYPE","ContextmenuInput","constructor","element","callback","options","Object","assign","enable","handleEvent","bind","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled","event","type","center","x","clientX","y","clientY","srcEvent","pointerType","target"],"sources":["../../../src/inputs/contextmenu-input.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EVENT_TYPE = 'contextmenu';\n\nexport default class ContextmenuInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}