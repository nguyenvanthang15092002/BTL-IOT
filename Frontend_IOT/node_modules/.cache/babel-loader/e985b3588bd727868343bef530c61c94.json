{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hoc Tap BKHN\\\\2023-1\\\\IoT-Project\\\\Frontend_IOT\\\\src\\\\screens\\\\Statistics\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { iDate } from '../../../utils/iDate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChart = _ref => {\n  _s();\n  let {\n    deviceItem\n  } = _ref;\n  const [data, setData] = useState({\n    labels: [],\n    co2: [],\n    dust: [],\n    humidity: [],\n    temperature: []\n  });\n  useEffect(() => {\n    if (deviceItem) {\n      let label = [];\n      let co2 = [];\n      let dust = [];\n      let humidity = [];\n      let temperature = [];\n      deviceItem.forEach(element => {\n        label.push(iDate(element === null || element === void 0 ? void 0 : element.at, '{j}/{n}/{f}, {h}:{m} '));\n        co2.push(element === null || element === void 0 ? void 0 : element.co2);\n        dust.push(element === null || element === void 0 ? void 0 : element.dust);\n        humidity.push(element === null || element === void 0 ? void 0 : element.humidity);\n        temperature.push(element === null || element === void 0 ? void 0 : element.temperature);\n      });\n      label = label.slice(label.length - 11, label.length - 1).reverse();\n      setData({\n        labels: label,\n        co2: [],\n        dust: [],\n        humidity: humidity.slice(humidity.length - 11, humidity.length - 1).reverse(),\n        temperature: temperature.slice(temperature.length - 11, temperature.length - 1).reverse()\n      });\n    }\n  }, [deviceItem]);\n  const hasCO2Data = data.co2.length > 0;\n  const hasDustData = data.dust.length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxHeight: '100vh'\n    },\n    children: [hasCO2Data && /*#__PURE__*/_jsxDEV(Bar, {\n      style: {\n        maxWidth: '50%',\n        maxHeight: '50%'\n      },\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'CO2',\n          backgroundColor: ['#FF6363'],\n          data: data.co2\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Statistics of CO2'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), hasDustData && /*#__PURE__*/_jsxDEV(Bar, {\n      style: {\n        maxWidth: '50%',\n        maxHeight: '50%'\n      },\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'Dust',\n          backgroundColor: ['#FFAB76'],\n          data: data.dust\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Statistics of Dust'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      style: {\n        maxWidth: '50%',\n        maxHeight: '50%'\n      },\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'Độ ẩm',\n          backgroundColor: ['#FFFDA2'],\n          data: data.humidity\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Statistics of Humidity'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      style: {\n        maxWidth: '50%',\n        maxHeight: '51%'\n      },\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: 'Nhiệt độ',\n          backgroundColor: ['#BAFFB4'],\n          data: data.temperature\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Statistics of Temperature'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(BarChart, \"YNAd0b1YNRKY0d9RPbZ3DDgV3gQ=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useState","useEffect","Bar","iDate","BarChart","deviceItem","data","setData","labels","co2","dust","humidity","temperature","label","forEach","element","push","at","slice","length","reverse","hasCO2Data","hasDustData","display","flexWrap","maxHeight","maxWidth","datasets","backgroundColor","legend","title","text"],"sources":["D:/Hoc Tap BKHN/2023-1/IoT-Project/Frontend_IOT/src/screens/Statistics/components/BarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { iDate } from '../../../utils/iDate';\r\n\r\nconst BarChart = ({ deviceItem }) => {\r\n  const [data, setData] = useState({\r\n    labels: [],\r\n    co2: [],\r\n    dust: [],\r\n    humidity: [],\r\n    temperature: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (deviceItem) {\r\n      let label = [];\r\n      let co2 = [];\r\n      let dust = [];\r\n      let humidity = [];\r\n      let temperature = [];\r\n\r\n      deviceItem.forEach((element) => {\r\n        label.push(iDate(element?.at, '{j}/{n}/{f}, {h}:{m} '));\r\n        co2.push(element?.co2);\r\n        dust.push(element?.dust);\r\n        humidity.push(element?.humidity);\r\n        temperature.push(element?.temperature);\r\n      });\r\n\r\n      label = label.slice(label.length - 11, label.length - 1).reverse();\r\n\r\n      setData({\r\n        labels: label,\r\n        co2: [],\r\n        dust: [],\r\n        humidity: humidity.slice(humidity.length - 11, humidity.length - 1).reverse(),\r\n        temperature: temperature.slice(temperature.length - 11, temperature.length - 1).reverse(),\r\n      });\r\n    }\r\n  }, [deviceItem]);\r\n\r\n  const hasCO2Data = data.co2.length > 0;\r\n  const hasDustData = data.dust.length > 0;\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexWrap: 'wrap', maxHeight: '100vh' }}>\r\n      {hasCO2Data && (\r\n        <Bar\r\n          style={{ maxWidth: '50%', maxHeight: '50%' }}\r\n          data={{\r\n            labels: data.labels,\r\n            datasets: [\r\n              {\r\n                label: 'CO2',\r\n                backgroundColor: ['#FF6363'],\r\n                data: data.co2,\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: {\r\n              display: true,\r\n              text: 'Statistics of CO2',\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {hasDustData && (\r\n        <Bar\r\n          style={{ maxWidth: '50%', maxHeight: '50%' }}\r\n          data={{\r\n            labels: data.labels,\r\n            datasets: [\r\n              {\r\n                label: 'Dust',\r\n                backgroundColor: ['#FFAB76'],\r\n                data: data.dust,\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: {\r\n              display: true,\r\n              text: 'Statistics of Dust',\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <Bar\r\n        style={{ maxWidth: '50%', maxHeight: '50%' }}\r\n        data={{\r\n          labels: data.labels,\r\n          datasets: [\r\n            {\r\n              label: 'Độ ẩm',\r\n              backgroundColor: ['#FFFDA2'],\r\n              data: data.humidity,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: {\r\n            display: true,\r\n            text: 'Statistics of Humidity',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <Bar\r\n        style={{ maxWidth: '50%', maxHeight: '51%' }}\r\n        data={{\r\n          labels: data.labels,\r\n          datasets: [\r\n            {\r\n              label: 'Nhiệt độ',\r\n              backgroundColor: ['#BAFFB4'],\r\n              data: data.temperature,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: {\r\n            display: true,\r\n            text: 'Statistics of Temperature',\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}