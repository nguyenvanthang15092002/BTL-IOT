{"ast":null,"code":"export const iDate = (date, stringFormat) => {\n  try {\n    let t;\n    if (/(^\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2}$)/.test(date)) {\n      date = (date || '').split(/\\D+/) || [];\n      date[1] = Number(date[1]) - 1;\n      t = new Date(...date);\n    } else {\n      t = new Date(date || new Date());\n    }\n    if (!t.getDate()) {\n      return '';\n    }\n    const s = Number(t);\n    const h = t.getHours();\n    const o = {\n      D: t.getDay(),\n      // index ngày trong tuần (number)\n      H: t.getHours(),\n      // giờ (number/H)\n      J: t.getDate(),\n      // ngày trong tháng (number)\n      M: t.getMinutes(),\n      // phút (number/M)\n      N: t.getMonth() + 1,\n      // tháng Việt Nam (number)\n      O: t,\n      // (Date)\n      S: t.getSeconds(),\n      // giây (number)\n      d: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][t.getDay()],\n      // thứ Việt nam (String)\n      f: t.getFullYear(),\n      // năm (number)\n      h: ('0' + t.getHours()).substr(-2),\n      // giờ (String)\n      j: ('0' + t.getDate()).substr(-2),\n      // ngày (String)\n      m: ('0' + t.getMinutes()).substr(-2),\n      // phút (String)\n      n: ('0' + (t.getMonth() + 1)).substr(-2),\n      // tháng (String)\n      s: ('0' + t.getSeconds()).substr(-2),\n      // giây (String)\n      t: s,\n      // mls (number)\n      u: parseInt(s / 1000),\n      // timestamp (number)\n      y: String(t.getFullYear()).substr(-2),\n      // 2 số cuối của năm (String)\n      A: t.getHours() >= 12 ? 'PM' : 'AM',\n      // AM PM                 t>new Date (t.getFullYear,t.getMonth(),t.getDate,12,\"01\",\"00\")\n      g: ('0' + (h === 0 ? 12 : h > 12 ? h - 12 : h)).substr(-2),\n      // Trả về định dạng 12 giờ\n      Month: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][t.getMonth()],\n      Mo: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][t.getMonth()]\n    };\n    if (typeof stringFormat === 'string') {\n      return stringFormat.replace(/{(Mo|Month|.)}/g, a => o[a.replace(/[{}]/g, '')]);\n    }\n    return o;\n  } catch (error) {\n    return date;\n  }\n};","map":{"version":3,"names":["iDate","date","stringFormat","t","test","split","Number","Date","getDate","s","h","getHours","o","D","getDay","H","J","M","getMinutes","N","getMonth","O","S","getSeconds","d","f","getFullYear","substr","j","m","n","u","parseInt","y","String","A","g","Month","Mo","replace","a","error"],"sources":["D:/SOFTWARE/Coder IT/IOT_Project/Frontend_IOT/src/utils/iDate.js"],"sourcesContent":["export const iDate = (date, stringFormat) => {\r\n  try {\r\n    let t\r\n    if (/(^\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2}$)/.test(date)) {\r\n      date = (date || '').split(/\\D+/) || []\r\n      date[1] = Number(date[1]) - 1\r\n      t = new Date(...date)\r\n    } else {\r\n      t = new Date(date || new Date())\r\n    }\r\n\r\n    if (!t.getDate()) {\r\n      return ''\r\n    }\r\n\r\n    const s = Number(t)\r\n    const h = t.getHours()\r\n    const o = {\r\n      D: t.getDay(), // index ngày trong tuần (number)\r\n      H: t.getHours(), // giờ (number/H)\r\n      J: t.getDate(), // ngày trong tháng (number)\r\n      M: t.getMinutes(), // phút (number/M)\r\n      N: t.getMonth() + 1, // tháng Việt Nam (number)\r\n      O: t, // (Date)\r\n      S: t.getSeconds(), // giây (number)\r\n      d: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'][t.getDay()], // thứ Việt nam (String)\r\n      f: t.getFullYear(), // năm (number)\r\n      h: ('0' + t.getHours()).substr(-2), // giờ (String)\r\n      j: ('0' + t.getDate()).substr(-2), // ngày (String)\r\n      m: ('0' + t.getMinutes()).substr(-2), // phút (String)\r\n      n: ('0' + (t.getMonth() + 1)).substr(-2), // tháng (String)\r\n      s: ('0' + t.getSeconds()).substr(-2), // giây (String)\r\n      t: s, // mls (number)\r\n      u: parseInt(s / 1000), // timestamp (number)\r\n      y: String(t.getFullYear()).substr(-2), // 2 số cuối của năm (String)\r\n      A: t.getHours() >= 12 ? 'PM' : 'AM', // AM PM                 t>new Date (t.getFullYear,t.getMonth(),t.getDate,12,\"01\",\"00\")\r\n      g: ('0' + (h === 0 ? 12 : h > 12 ? h - 12 : h)).substr(-2), // Trả về định dạng 12 giờ\r\n      Month: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ][t.getMonth()],\r\n      Mo: [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n      ][t.getMonth()],\r\n    }\r\n    if (typeof stringFormat === 'string') {\r\n      return stringFormat.replace(\r\n        /{(Mo|Month|.)}/g,\r\n        (a) => o[a.replace(/[{}]/g, '')]\r\n      )\r\n    }\r\n\r\n    return o\r\n  } catch (error) {\r\n    return date\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}