{"ast":null,"code":"import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\nimport { log2 } from './math-utils';\nexport default function fitBounds(_ref) {\n  let {\n    width,\n    height,\n    bounds,\n    minExtent = 0,\n    maxZoom = 24,\n    padding = 0,\n    offset = [0, 0]\n  } = _ref;\n  const [[west, south], [east, north]] = bounds;\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    assert(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));\n  }\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n  const size = [Math.max(Math.abs(se[0] - nw[0]), minExtent), Math.max(Math.abs(se[1] - nw[1]), minExtent)];\n  const targetSize = [width - padding.left - padding.right - Math.abs(offset[0]) * 2, height - padding.top - padding.bottom - Math.abs(offset[1]) * 2];\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n  const centerLngLat = viewport.unproject(center);\n  const zoom = Math.min(maxZoom, viewport.zoom + log2(Math.abs(Math.min(scaleX, scaleY))));\n  assert(Number.isFinite(zoom));\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}","map":{"version":3,"mappings":"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","names":["WebMercatorViewport","assert","log2","fitBounds","width","height","bounds","minExtent","maxZoom","padding","offset","west","south","east","north","Number","isFinite","p","top","bottom","left","right","viewport","longitude","latitude","zoom","nw","project","se","size","Math","max","abs","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","min"],"sources":["../../src/fit-bounds.js"],"sourcesContent":["// @ts-nocheck TODO padding\nimport WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\nimport {log2} from './math-utils';\n\n// Returns map settings {latitude, longitude, zoom}\n// that will contain the provided corners within the provided width.\n// Only supports non-perspective mode.\n\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  minExtent = 0, // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(\n      Number.isFinite(padding.top) &&\n        Number.isFinite(padding.bottom) &&\n        Number.isFinite(padding.left) &&\n        Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = Math.min(maxZoom, viewport.zoom + log2(Math.abs(Math.min(scaleX, scaleY))));\n\n  assert(Number.isFinite(zoom));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n"]},"metadata":{},"sourceType":"module"}