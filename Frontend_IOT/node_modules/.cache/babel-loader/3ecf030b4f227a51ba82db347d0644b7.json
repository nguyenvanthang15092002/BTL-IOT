{"ast":null,"code":"import { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  MOUSE_EVENTS\n} = INPUT_EVENT_TYPES;\nconst MOVE_EVENT_TYPE = 'pointermove';\nconst OVER_EVENT_TYPE = 'pointerover';\nconst OUT_EVENT_TYPE = 'pointerout';\nconst LEAVE_EVENT_TYPE = 'pointerleave';\nexport default class MoveInput {\n  constructor(element, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  enableEventType(eventType, enabled) {\n    if (eventType === MOVE_EVENT_TYPE) {\n      this.enableMoveEvent = enabled;\n    }\n    if (eventType === OVER_EVENT_TYPE) {\n      this.enableOverEvent = enabled;\n    }\n    if (eventType === OUT_EVENT_TYPE) {\n      this.enableOutEvent = enabled;\n    }\n    if (eventType === LEAVE_EVENT_TYPE) {\n      this.enableLeaveEvent = enabled;\n    }\n  }\n  handleEvent(event) {\n    this.handleOverEvent(event);\n    this.handleOutEvent(event);\n    this.handleLeaveEvent(event);\n    this.handleMoveEvent(event);\n  }\n  handleOverEvent(event) {\n    if (this.enableOverEvent) {\n      if (event.type === 'mouseover') {\n        this.callback({\n          type: OVER_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n  handleOutEvent(event) {\n    if (this.enableOutEvent) {\n      if (event.type === 'mouseout') {\n        this.callback({\n          type: OUT_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n  handleLeaveEvent(event) {\n    if (this.enableLeaveEvent) {\n      if (event.type === 'mouseleave') {\n        this.callback({\n          type: LEAVE_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n  handleMoveEvent(event) {\n    if (this.enableMoveEvent) {\n      switch (event.type) {\n        case 'mousedown':\n          if (event.button >= 0) {\n            this.pressed = true;\n          }\n          break;\n        case 'mousemove':\n          if (event.which === 0) {\n            this.pressed = false;\n          }\n          if (!this.pressed) {\n            this.callback({\n              type: MOVE_EVENT_TYPE,\n              srcEvent: event,\n              pointerType: 'mouse',\n              target: event.target\n            });\n          }\n          break;\n        case 'mouseup':\n          this.pressed = false;\n          break;\n        default:\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["INPUT_EVENT_TYPES","MOUSE_EVENTS","MOVE_EVENT_TYPE","OVER_EVENT_TYPE","OUT_EVENT_TYPE","LEAVE_EVENT_TYPE","MoveInput","constructor","element","callback","options","pressed","Object","assign","enable","enableMoveEvent","enableLeaveEvent","enableOutEvent","enableOverEvent","events","concat","handleEvent","bind","forEach","event","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled","handleOverEvent","handleOutEvent","handleLeaveEvent","handleMoveEvent","type","srcEvent","pointerType","target","button","which"],"sources":["../../../src/inputs/move-input.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\n\nconst {MOUSE_EVENTS} = INPUT_EVENT_TYPES;\nconst MOVE_EVENT_TYPE = 'pointermove';\nconst OVER_EVENT_TYPE = 'pointerover';\nconst OUT_EVENT_TYPE = 'pointerout';\nconst LEAVE_EVENT_TYPE = 'pointerleave';\n\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\nexport default class MoveInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n\n    this.options = Object.assign({enable: true}, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === MOVE_EVENT_TYPE) {\n      this.enableMoveEvent = enabled;\n    }\n    if (eventType === OVER_EVENT_TYPE) {\n      this.enableOverEvent = enabled;\n    }\n    if (eventType === OUT_EVENT_TYPE) {\n      this.enableOutEvent = enabled;\n    }\n    if (eventType === LEAVE_EVENT_TYPE) {\n      this.enableLeaveEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    this.handleOverEvent(event);\n    this.handleOutEvent(event);\n    this.handleLeaveEvent(event);\n    this.handleMoveEvent(event);\n  }\n\n  handleOverEvent(event) {\n    if (this.enableOverEvent) {\n      if (event.type === 'mouseover') {\n        this.callback({\n          type: OVER_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleOutEvent(event) {\n    if (this.enableOutEvent) {\n      if (event.type === 'mouseout') {\n        this.callback({\n          type: OUT_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleLeaveEvent(event) {\n    if (this.enableLeaveEvent) {\n      if (event.type === 'mouseleave') {\n        this.callback({\n          type: LEAVE_EVENT_TYPE,\n          srcEvent: event,\n          pointerType: 'mouse',\n          target: event.target\n        });\n      }\n    }\n  }\n\n  handleMoveEvent(event) {\n    if (this.enableMoveEvent) {\n      switch (event.type) {\n        case 'mousedown':\n          if (event.button >= 0) {\n            // Button is down\n            this.pressed = true;\n          }\n          break;\n        case 'mousemove':\n          // Move events use `which` to track the button being pressed\n          if (event.which === 0) {\n            // Button is not down\n            this.pressed = false;\n          }\n          if (!this.pressed) {\n            // Drag events are emitted by hammer already\n            // we just need to emit the move event on hover\n            this.callback({\n              type: MOVE_EVENT_TYPE,\n              srcEvent: event,\n              pointerType: 'mouse',\n              target: event.target\n            });\n          }\n          break;\n        case 'mouseup':\n          this.pressed = false;\n          break;\n        default:\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}