{"ast":null,"code":"import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n    ay = a[1],\n    az = a[2];\n  var bx = b[0],\n    by = b[1],\n    bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1],\n    z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3];\n  var x = a[0],\n    y = a[1],\n    z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n    uvy = qz * x - qx * z,\n    uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n    uuvy = qz * uvx - qx * uvz,\n    uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n    r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n    r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n    r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    bx = b[0],\n    by = b[1],\n    bz = b[2],\n    mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n    mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n    mag = mag1 * mag2,\n    cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1],\n    a2 = a[2];\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 3;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n    return a;\n  };\n}();","map":{"version":3,"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","length","x","y","z","Math","hypot","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","sqrt","dot","cross","ax","ay","az","bx","by","bz","lerp","t","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","RANDOM","PI","zScale","cos","sin","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","angle","mag1","mag2","mag","cosine","acos","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"sources":["D:/SOFTWARE/Coder IT/IOT_Project/Frontend_IOT/node_modules/@math.gl/web-mercator/node_modules/gl-matrix/esm/vec3.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  out[2] = a[2] * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n  return out;\r\n}\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2]; // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\r\n\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\r\n\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\r\n\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function rotateX(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\r\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function rotateY(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function rotateZ(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\r\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\r\n  r[2] = p[2]; //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\n\r\nexport function angle(a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\r\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\r\n      mag = mag1 * mag2,\r\n      cosine = mag && dot(a, b) / mag;\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\nexport function str(a) {\r\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\n\r\nexport var div = divide;\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\n\r\nexport var dist = distance;\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\n\r\nexport var sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexport var forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}