{"ast":null,"code":"import { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nconst firefox = userAgent.indexOf('firefox') !== -1;\nconst {\n  WHEEL_EVENTS\n} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\nconst SHIFT_MULTIPLIER = 0.25;\nexport default class WheelInput {\n  constructor(element, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.events = WHEEL_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent, passiveSupported ? {\n      passive: false\n    } : false));\n  }\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n    let value = event.deltaY;\n    if (window.WheelEvent) {\n      if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n        value /= window.devicePixelRatio;\n      }\n      if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n        value *= WHEEL_DELTA_PER_LINE;\n      }\n    }\n    const wheelPosition = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n      value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n    }\n    if (event.shiftKey && value) {\n      value = value * SHIFT_MULTIPLIER;\n    }\n    this._onWheel(event, -value, wheelPosition);\n  }\n  _onWheel(srcEvent, delta, position) {\n    this.callback({\n      type: EVENT_TYPE,\n      center: position,\n      delta,\n      srcEvent,\n      pointerType: 'mouse',\n      target: srcEvent.target\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["INPUT_EVENT_TYPES","window","userAgent","passiveSupported","firefox","indexOf","WHEEL_EVENTS","EVENT_TYPE","WHEEL_DELTA_MAGIC_SCALER","WHEEL_DELTA_PER_LINE","SHIFT_MULTIPLIER","WheelInput","constructor","element","callback","options","Object","assign","enable","events","concat","handleEvent","bind","forEach","event","addEventListener","passive","destroy","removeEventListener","enableEventType","eventType","enabled","value","deltaY","WheelEvent","deltaMode","DOM_DELTA_PIXEL","devicePixelRatio","DOM_DELTA_LINE","wheelPosition","x","clientX","y","clientY","Math","floor","shiftKey","_onWheel","srcEvent","delta","position","type","center","pointerType","target"],"sources":["../../../src/inputs/wheel-input.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\nimport {window, userAgent, passiveSupported} from '../utils/globals';\n\nconst firefox = userAgent.indexOf('firefox') !== -1;\n\nconst {WHEEL_EVENTS} = INPUT_EVENT_TYPES;\nconst EVENT_TYPE = 'wheel';\n\n// Constants for normalizing input delta\nconst WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nconst WHEEL_DELTA_PER_LINE = 40;\n// Slow down zoom if shift key is held for more precise zooming\nconst SHIFT_MULTIPLIER = 0.25;\n\nexport default class WheelInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n\n    this.events = WHEEL_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(event =>\n      element.addEventListener(event, this.handleEvent, passiveSupported ? {passive: false} : false)\n    );\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  /* eslint-disable complexity, max-statements */\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n\n    let value = event.deltaY;\n    if (window.WheelEvent) {\n      // Firefox doubles the values on retina screens...\n      if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n        value /= window.devicePixelRatio;\n      }\n      if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n        value *= WHEEL_DELTA_PER_LINE;\n      }\n    }\n\n    const wheelPosition = {\n      x: event.clientX,\n      y: event.clientY\n    };\n\n    if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n      // This one is definitely a mouse wheel event.\n      // Normalize this value to match trackpad.\n      value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n    }\n\n    if (event.shiftKey && value) {\n      value = value * SHIFT_MULTIPLIER;\n    }\n\n    this._onWheel(event, -value, wheelPosition);\n  }\n\n  _onWheel(srcEvent, delta, position) {\n    this.callback({\n      type: EVENT_TYPE,\n      center: position,\n      delta,\n      srcEvent,\n      pointerType: 'mouse',\n      target: srcEvent.target\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}