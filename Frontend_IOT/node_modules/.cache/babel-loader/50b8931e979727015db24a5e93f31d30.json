{"ast":null,"code":"var _jsxFileName = \"E:\\\\CongNgheThongTinBk\\\\20221\\\\IotVaUngDung\\\\btl\\\\Nhom10\\\\sourcecode\\\\iot-web-fe\\\\src\\\\screens\\\\Statistics\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { getNearestCity } from \"../../services/airVisualService\";\nimport { getDeviceById } from \"../../services/devicesServices\"; //context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StatisticsContext = /*#__PURE__*/createContext({}); //hook\n\nexport const useStatisticsContext = () => {\n  _s();\n\n  return useContext(StatisticsContext);\n}; //provider\n\n_s(useStatisticsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const StatisticsContextProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [device, setDevice] = useState();\n  const [nearestCity, setNearestCity] = useState();\n  useEffect(() => {\n    getDeviceItemById();\n    infoNearestCity();\n  }, []);\n\n  const getDeviceItemById = async () => {\n    try {\n      if (window) var id = window.location.pathname.split('/');\n      let tmp = await getDeviceById(id[2]);\n      setDevice((tmp === null || tmp === void 0 ? void 0 : tmp.device) || {});\n    } catch (error) {\n      console.log(`error`, error);\n    }\n  };\n\n  setInterval(getDeviceItemById, 30000);\n\n  const infoNearestCity = async () => {\n    let info = await getNearestCity();\n    setNearestCity(info);\n  };\n\n  const value = useMemo(() => ({\n    device,\n    nearestCity\n  }), // eslint-disable-next-line no-sequences\n  [device, nearestCity]);\n  return /*#__PURE__*/_jsxDEV(StatisticsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(StatisticsContextProvider, \"Id47yGO5M0RPtOImipHcaA66DOs=\");\n\n_c = StatisticsContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StatisticsContextProvider\");","map":{"version":3,"sources":["E:/CongNgheThongTinBk/20221/IotVaUngDung/btl/Nhom10/sourcecode/iot-web-fe/src/screens/Statistics/context.js"],"names":["createContext","useContext","useEffect","useMemo","useState","getNearestCity","getDeviceById","StatisticsContext","useStatisticsContext","StatisticsContextProvider","children","device","setDevice","nearestCity","setNearestCity","getDeviceItemById","infoNearestCity","window","id","location","pathname","split","tmp","error","console","log","setInterval","info","value"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,OAA/C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,aAAT,QAA8B,gCAA9B,C,CAEA;;;AACA,OAAO,MAAMC,iBAAiB,gBAAGP,aAAa,CAAC,EAAD,CAAvC,C,CAEP;;AACA,OAAO,MAAMQ,oBAAoB,GAAG;AAAA;;AAAA,SAAMP,UAAU,CAACM,iBAAD,CAAhB;AAAA,CAA7B,C,CAEP;;GAFaC,oB;;AAGb,OAAO,MAAMC,yBAAyB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,EAApC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,iBAAiB;AACjBC,IAAAA,eAAe;AAChB,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMD,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,UAAIE,MAAJ,EAAY,IAAIC,EAAE,GAAGD,MAAM,CAACE,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,CAAT;AACZ,UAAIC,GAAG,GAAG,MAAMhB,aAAa,CAACY,EAAE,CAAC,CAAD,CAAH,CAA7B;AACAN,MAAAA,SAAS,CAAC,CAAAU,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEX,MAAL,KAAe,EAAhB,CAAT;AACD,KAJD,CAIE,OAAOY,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAb,EAAqBF,KAArB;AACD;AAEF,GATD;;AAWAG,EAAAA,WAAW,CAACX,iBAAD,EAAoB,KAApB,CAAX;;AAEA,QAAMC,eAAe,GAAG,YAAY;AAClC,QAAIW,IAAI,GAAG,MAAMtB,cAAc,EAA/B;AACAS,IAAAA,cAAc,CAACa,IAAD,CAAd;AAED,GAJD;;AAQA,QAAMC,KAAK,GAAGzB,OAAO,CAAC,OAAO;AAC3BQ,IAAAA,MAD2B;AACnBE,IAAAA;AADmB,GAAP,CAAD,EAGnB;AACA,GAACF,MAAD,EAASE,WAAT,CAJmB,CAArB;AAKA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEe,KAAnC;AAAA,cACGlB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxCM;;IAAMD,yB;;KAAAA,yB","sourcesContent":["import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { getNearestCity } from \"../../services/airVisualService\";\r\nimport { getDeviceById } from \"../../services/devicesServices\";\r\n\r\n//context\r\nexport const StatisticsContext = createContext({})\r\n\r\n//hook\r\nexport const useStatisticsContext = () => useContext(StatisticsContext)\r\n\r\n//provider\r\nexport const StatisticsContextProvider = ({ children }) => {\r\n  const [device, setDevice] = useState()\r\n  const [nearestCity, setNearestCity] = useState()\r\n\r\n  useEffect(() => {\r\n    getDeviceItemById()\r\n    infoNearestCity()\r\n  }, [])\r\n\r\n  const getDeviceItemById = async () => {\r\n    try {\r\n      if (window) var id = window.location.pathname.split('/')\r\n      let tmp = await getDeviceById(id[2])\r\n      setDevice(tmp?.device || {})\r\n    } catch (error) {\r\n      console.log(`error`, error)\r\n    }\r\n\r\n  }\r\n\r\n  setInterval(getDeviceItemById, 30000)\r\n\r\n  const infoNearestCity = async () => {\r\n    let info = await getNearestCity()\r\n    setNearestCity(info)\r\n\r\n  }\r\n\r\n\r\n\r\n  const value = useMemo(() => ({\r\n    device, nearestCity\r\n  }),\r\n    // eslint-disable-next-line no-sequences\r\n    [device, nearestCity])\r\n  return (\r\n    <StatisticsContext.Provider value={value}>\r\n      {children}\r\n    </StatisticsContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}