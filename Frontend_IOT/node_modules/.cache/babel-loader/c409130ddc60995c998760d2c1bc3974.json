{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport * as React from 'react';\nimport { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { cloneElement } from 'react';\nimport * as PropTypes from 'prop-types';\nimport MapContext from './map-context';\nimport assert from '../utils/assert';\nimport deepEqual from '../utils/deep-equal';\nvar propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string\n};\nvar sourceCounter = 0;\nfunction createSource(map, id, props) {\n  if (map.style && map.style._loaded) {\n    var options = _objectSpread({}, props);\n    delete options.id;\n    delete options.children;\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n  return null;\n}\nfunction updateSource(source, props, prevProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n  var changedKey = '';\n  var changedKeyCount = 0;\n  for (var key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n  if (!changedKeyCount) {\n    return;\n  }\n  var type = props.type;\n  if (type === 'geojson') {\n    source.setData(props.data);\n  } else if (type === 'image') {\n    source.updateImage({\n      url: props.url,\n      coordinates: props.coordinates\n    });\n  } else if ((type === 'canvas' || type === 'video') && changedKeyCount === 1 && changedKey === 'coordinates') {\n    source.setCoordinates(props.coordinates);\n  } else if (type === 'vector' && source.setUrl) {\n    switch (changedKey) {\n      case 'url':\n        source.setUrl(props.url);\n        break;\n      case 'tiles':\n        source.setTiles(props.tiles);\n        break;\n      default:\n    }\n  } else {\n    console.warn(\"Unable to update <Source> prop: \".concat(changedKey));\n  }\n}\nfunction Source(props) {\n  var context = useContext(MapContext);\n  var propsRef = useRef({\n    id: props.id,\n    type: props.type\n  });\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    setStyleLoaded = _useState2[1];\n  var id = useMemo(function () {\n    return props.id || \"jsx-source-\".concat(sourceCounter++);\n  }, []);\n  var map = context.map;\n  useEffect(function () {\n    if (map) {\n      var forceUpdate = function forceUpdate() {\n        return setStyleLoaded(function (version) {\n          return version + 1;\n        });\n      };\n      map.on('styledata', forceUpdate);\n      return function () {\n        map.off('styledata', forceUpdate);\n        requestAnimationFrame(function () {\n          if (map.style && map.style._loaded && map.getSource(id)) {\n            map.removeSource(id);\n          }\n        });\n      };\n    }\n    return undefined;\n  }, [map, id]);\n  var source = map && map.style && map.getSource(id);\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n  propsRef.current = props;\n  return source && React.Children.map(props.children, function (child) {\n    return child && cloneElement(child, {\n      source: id\n    });\n  }) || null;\n}\nSource.propTypes = propTypes;\nexport default Source;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,OAA/B,EAAwCC,QAAxC,EAAkDC,MAAlD,QAA+D,OAA/D;AACA,SAAQC,YAAR,QAA2B,OAA3B;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,IAAMC,SAAS,GAAG;EAChBC,IAAI,EAAEL,SAAS,CAACM,MAAV,CAAiBC,UADP;EAEhBC,EAAE,EAAER,SAAS,CAACM;AAFE,CAAlB;AAKA,IAAIG,aAAa,GAAG,CAApB;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BH,EAA3B,EAA+BI,KAA/B,EAAsC;EACpC,IAAID,GAAG,CAACE,KAAJ,IAAaF,GAAG,CAACE,KAAJ,CAAUC,OAA3B,EAAoC;IAClC,IAAMC,OAAO,qBAAOH,KAAP,CAAb;IACA,OAAOG,OAAO,CAACP,EAAf;IACA,OAAOO,OAAO,CAACC,QAAf;IACAL,GAAG,CAACM,SAAJ,CAAcT,EAAd,EAAkBO,OAAlB;IACA,OAAOJ,GAAG,CAACO,SAAJ,CAAcV,EAAd,CAAP;EACD;EACD,OAAO,IAAP;AACD;AAGD,SAASW,YAAT,CAAsBC,MAAtB,EAA8BR,KAA9B,EAAqCS,SAArC,EAAgD;EAC9CnB,MAAM,CAACU,KAAK,CAACJ,EAAN,KAAaa,SAAS,CAACb,EAAxB,EAA4B,mBAA5B,CAAN;EACAN,MAAM,CAACU,KAAK,CAACP,IAAN,KAAegB,SAAS,CAAChB,IAA1B,EAAgC,qBAAhC,CAAN;EAEA,IAAIiB,UAAU,GAAG,EAAjB;EACA,IAAIC,eAAe,GAAG,CAAtB;EAEA,KAAK,IAAMC,GAAX,IAAkBZ,KAAlB,EAAyB;IACvB,IAAIY,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,IAA9B,IAAsC,CAACrB,SAAS,CAACkB,SAAS,CAACG,GAAD,CAAV,EAAiBZ,KAAK,CAACY,GAAD,CAAtB,CAApD,EAAkF;MAChFF,UAAU,GAAGE,GAAb;MACAD,eAAe;IAChB;EACF;EAED,IAAI,CAACA,eAAL,EAAsB;IACpB;EACD;EAhB6C,IAkBvClB,IAlBuC,GAkB/BO,KAlB+B,CAkBvCP,IAlBuC;EAmB9C,IAAIA,IAAI,KAAK,SAAb,EAAwB;IACtBe,MAAM,CAACK,OAAP,CAAeb,KAAK,CAACc,IAArB;EACD,CAFD,MAEO,IAAIrB,IAAI,KAAK,OAAb,EAAsB;IAC3Be,MAAM,CAACO,WAAP,CAAmB;MAACC,GAAG,EAAEhB,KAAK,CAACgB,GAAZ;MAAiBC,WAAW,EAAEjB,KAAK,CAACiB;IAApC,CAAnB;EACD,CAFM,MAEA,IACL,CAACxB,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,OAA/B,KACAkB,eAAe,KAAK,CADpB,IAEAD,UAAU,KAAK,aAHV,EAIL;IACAF,MAAM,CAACU,cAAP,CAAsBlB,KAAK,CAACiB,WAA5B;EACD,CANM,MAMA,IAAIxB,IAAI,KAAK,QAAT,IAAqBe,MAAM,CAACW,MAAhC,EAAwC;IAI7C,QAAQT,UAAR;MACE,KAAK,KAAL;QACEF,MAAM,CAACW,MAAP,CAAcnB,KAAK,CAACgB,GAApB;QACA;MACF,KAAK,OAAL;QACER,MAAM,CAACY,QAAP,CAAgBpB,KAAK,CAACqB,KAAtB;QACA;MACF;IAAA;EAEH,CAbM,MAaA;IAELC,OAAO,CAACC,IAAR,2CAAgDb,UAAhD;EACD;AACF;AAGD,SAASc,MAAT,CAAgBxB,KAAhB,EAAuB;EACrB,IAAMyB,OAAO,GAAG3C,UAAU,CAACO,UAAD,CAA1B;EACA,IAAMqC,QAAQ,GAAGxC,MAAM,CAAC;IAACU,EAAE,EAAEI,KAAK,CAACJ,EAAX;IAAeH,IAAI,EAAEO,KAAK,CAACP;EAA3B,CAAD,CAAvB;EAFqB,gBAGMR,QAAQ,CAAC,CAAD,CAHd;IAAA0C;IAGZC,cAHY;EAKrB,IAAMhC,EAAE,GAAGZ,OAAO,CAAC;IAAA,OAAMgB,KAAK,CAACJ,EAAN,yBAA0BC,aAAa,EAAvC,CAAN;EAAA,CAAD,EAAoD,EAApD,CAAlB;EALqB,IAMdE,GANc,GAMP0B,OANO,CAMd1B,GANc;EAQrBhB,SAAS,CAAC,YAAM;IACd,IAAIgB,GAAJ,EAAS;MACP,IAAM8B,WAAW,GAAG,SAAdA,WAAc;QAAA,OAAMD,cAAc,CAAC,iBAAO;UAAA,OAAIE,OAAO,GAAG,CAAd;QAAA,CAAR,CAApB;MAAA,CAApB;MACA/B,GAAG,CAACgC,EAAJ,CAAO,WAAP,EAAoBF,WAApB;MAEA,OAAO,YAAM;QACX9B,GAAG,CAACiC,GAAJ,CAAQ,WAAR,EAAqBH,WAArB;QAMAI,qBAAqB,CAAC,YAAM;UAC1B,IAAIlC,GAAG,CAACE,KAAJ,IAAaF,GAAG,CAACE,KAAJ,CAAUC,OAAvB,IAAkCH,GAAG,CAACO,SAAJ,CAAcV,EAAd,CAAtC,EAAyD;YACvDG,GAAG,CAACmC,YAAJ,CAAiBtC,EAAjB;UACD;QACF,CAJoB,CAArB;MAKD,CAZD;IAaD;IACD,OAAOuC,SAAP;EACD,CApBQ,EAoBN,CAACpC,GAAD,EAAMH,EAAN,CApBM,CAAT;EAsBA,IAAIY,MAAM,GAAGT,GAAG,IAAIA,GAAG,CAACE,KAAX,IAAoBF,GAAG,CAACO,SAAJ,CAAcV,EAAd,CAAjC;EACA,IAAIY,MAAJ,EAAY;IACVD,YAAY,CAACC,MAAD,EAASR,KAAT,EAAgB0B,QAAQ,CAACU,OAAzB,CAAZ;EACD,CAFD,MAEO;IACL5B,MAAM,GAAGV,YAAY,CAACC,GAAD,EAAMH,EAAN,EAAUI,KAAV,CAArB;EACD;EACD0B,QAAQ,CAACU,OAAT,GAAmBpC,KAAnB;EAEA,OACGQ,MAAM,IACL3B,KAAK,CAACwD,QAAN,CAAetC,GAAf,CACEC,KAAK,CAACI,QADR,EAEE,eAAK;IAAA,OACHkC,KAAK,IACLnD,YAAY,CAACmD,KAAD,EAAQ;MAClB9B,MAAM,EAAEZ;IADU,CAAR,CAFT;EAAA,CAFP,CADF,IASA,IAVF;AAYD;AAED4B,MAAM,CAAChC,SAAP,GAAmBA,SAAnB;AACA,eAAegC,MAAf","names":["React","useContext","useEffect","useMemo","useState","useRef","cloneElement","PropTypes","MapContext","assert","deepEqual","propTypes","type","string","isRequired","id","sourceCounter","createSource","map","props","style","_loaded","options","children","addSource","getSource","updateSource","source","prevProps","changedKey","changedKeyCount","key","setData","data","updateImage","url","coordinates","setCoordinates","setUrl","setTiles","tiles","console","warn","Source","context","propsRef","_useState2","setStyleLoaded","forceUpdate","version","on","off","requestAnimationFrame","removeSource","undefined","current","Children","child"],"sources":["../../../src/components/source.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {useContext, useEffect, useMemo, useState, useRef} from 'react';\nimport {cloneElement} from 'react';\nimport * as PropTypes from 'prop-types';\nimport MapContext from './map-context';\nimport assert from '../utils/assert';\nimport deepEqual from '../utils/deep-equal';\n\nconst propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string\n};\n\nlet sourceCounter = 0;\n\nfunction createSource(map, id, props) {\n  if (map.style && map.style._loaded) {\n    const options = {...props};\n    delete options.id;\n    delete options.children;\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n  return null;\n}\n\n/* eslint-disable complexity */\nfunction updateSource(source, props, prevProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n\n  let changedKey = '';\n  let changedKeyCount = 0;\n\n  for (const key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n\n  if (!changedKeyCount) {\n    return;\n  }\n\n  const {type} = props;\n  if (type === 'geojson') {\n    source.setData(props.data);\n  } else if (type === 'image') {\n    source.updateImage({url: props.url, coordinates: props.coordinates});\n  } else if (\n    (type === 'canvas' || type === 'video') &&\n    changedKeyCount === 1 &&\n    changedKey === 'coordinates'\n  ) {\n    source.setCoordinates(props.coordinates);\n  } else if (type === 'vector' && source.setUrl) {\n    // Added in 1.12.0:\n    // vectorTileSource.setTiles\n    // vectorTileSource.setUrl\n    switch (changedKey) {\n      case 'url':\n        source.setUrl(props.url);\n        break;\n      case 'tiles':\n        source.setTiles(props.tiles);\n        break;\n      default:\n    }\n  } else {\n    // eslint-disable-next-line\n    console.warn(`Unable to update <Source> prop: ${changedKey}`);\n  }\n}\n/* eslint-enable complexity */\n\nfunction Source(props) {\n  const context = useContext(MapContext);\n  const propsRef = useRef({id: props.id, type: props.type});\n  const [, setStyleLoaded] = useState(0);\n\n  const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n  const {map} = context;\n\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setStyleLoaded(version => version + 1);\n      map.on('styledata', forceUpdate);\n\n      return () => {\n        map.off('styledata', forceUpdate);\n        /* global requestAnimationFrame */\n        // Do not remove source immediately because the\n        // dependent <Layer>s' componentWillUnmount() might not have been called\n        // Removing source before dependent layers will throw error\n        // TODO - find a more robust solution\n        requestAnimationFrame(() => {\n          if (map.style && map.style._loaded && map.getSource(id)) {\n            map.removeSource(id);\n          }\n        });\n      };\n    }\n    return undefined;\n  }, [map, id]);\n\n  let source = map && map.style && map.getSource(id);\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n  propsRef.current = props;\n\n  return (\n    (source &&\n      React.Children.map(\n        props.children,\n        child =>\n          child &&\n          cloneElement(child, {\n            source: id\n          })\n      )) ||\n    null\n  );\n}\n\nSource.propTypes = propTypes;\nexport default Source;\n"]},"metadata":{},"sourceType":"module"}