{"ast":null,"code":"import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nconst defaultDatasetIdKey = 'label';\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nfunction setOptions(chart, nextOptions) {\n  chart.options = {\n    ...nextOptions\n  };\n}\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return {\n        ...nextDataset\n      };\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\r\n * Get dataset from mouse click event\r\n * @param chart - Chart.js instance\r\n * @param event - Mouse click event\r\n * @returns Dataset\r\n */\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\r\n * Get single dataset element from mouse click event\r\n * @param chart - Chart.js instance\r\n * @param event - Mouse click event\r\n * @returns Dataset\r\n */\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\r\n * Get all dataset elements from mouse click event\r\n * @param chart - Chart.js instance\r\n * @param event - Mouse click event\r\n * @returns Dataset\r\n */\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\nfunction ChartComponent(param, ref) {\n  let {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    ...props\n  } = param;\n  const canvasRef = useRef(null);\n  const chartRef = useRef();\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options,\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update();\n    }\n  }, [redraw, options, data.labels, data.datasets]);\n  useEffect(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, props), fallbackContent);\n}\nconst Chart = /*#__PURE__*/forwardRef(ChartComponent);\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Chart, Object.assign({}, props, {\n    ref: ref,\n    type: type\n  })));\n}\nconst Line = /* #__PURE__ */createTypedChart('line', LineController);\nconst Bar = /* #__PURE__ */createTypedChart('bar', BarController);\nconst Radar = /* #__PURE__ */createTypedChart('radar', RadarController);\nconst Doughnut = /* #__PURE__ */createTypedChart('doughnut', DoughnutController);\nconst PolarArea = /* #__PURE__ */createTypedChart('polarArea', PolarAreaController);\nconst Bubble = /* #__PURE__ */createTypedChart('bubble', BubbleController);\nconst Pie = /* #__PURE__ */createTypedChart('pie', PieController);\nconst Scatter = /* #__PURE__ */createTypedChart('scatter', ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"mappings":"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","names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","param","height","width","redraw","type","plugins","fallbackContent","props","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sources":["../src/utils.ts","../src/chart.tsx","../src/typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  chart.options = { ...nextOptions };\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(\n      dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]\n    );\n\n    // There is no original to update, so simply add new one\n    if (\n      !currentDataset ||\n      !nextDataset.data ||\n      addedDatasets.includes(currentDataset)\n    ) {\n      return { ...nextDataset };\n    }\n\n    addedDatasets.push(currentDataset);\n\n    Object.assign(currentDataset, nextDataset);\n\n    return currentDataset;\n  });\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options,\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update();\n    }\n  }, [redraw, options, data.labels, data.datasets]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}