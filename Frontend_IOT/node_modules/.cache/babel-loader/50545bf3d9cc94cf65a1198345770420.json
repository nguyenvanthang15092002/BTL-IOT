{"ast":null,"code":"import { worldToLngLat } from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { transformVector } from './math-utils';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nexport default function getBounds(viewport) {\n  let z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const {\n    width,\n    height,\n    unproject\n  } = viewport;\n  const unprojectOps = {\n    targetZ: z\n  };\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft;\n  let topRight;\n  const halfFov = viewport.fovy ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS : Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  if (halfFov > angleToGround - 0.01) {\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\nfunction unprojectOnFarPlane(viewport, x, targetZ) {\n  const {\n    pixelUnprojectionMatrix\n  } = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n  const result = worldToLngLat(coord);\n  result[2] = targetZ;\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,aAAR,QAA4B,sBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,SAAQC,eAAR,QAA8B,cAA9B;AAEA,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAL,GAAU,GAArC;AAOA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAAoC;EAAA,IAAPC,CAAC,uEAAG,CAAjC;EACb,MAAM;IAACC,KAAD;IAAQC,MAAR;IAAgBC;EAAhB,IAA6BJ,QAAnC;EACA,MAAMK,YAAY,GAAG;IAACC,OAAO,EAAEL;EAAV,CAArB;EACA,MAAMM,UAAU,GAAGH,SAAS,CAAC,CAAC,CAAD,EAAID,MAAJ,CAAD,EAAcE,YAAd,CAA5B;EACA,MAAMG,WAAW,GAAGJ,SAAS,CAAC,CAACF,KAAD,EAAQC,MAAR,CAAD,EAAkBE,YAAlB,CAA7B;EACA,IAAII,OAAJ;EACA,IAAIC,QAAJ;EAEA,MAAMC,OAAO,GAAGX,QAAQ,CAACY,IAAT,GACZ,MAAMZ,QAAQ,CAACY,IAAf,GAAsBhB,kBADV,GAEZC,IAAI,CAACgB,IAAL,CAAU,MAAMb,QAAQ,CAACc,QAAzB,CAFJ;EAGA,MAAMC,aAAa,GAAG,CAAC,KAAKf,QAAQ,CAACgB,KAAf,IAAwBpB,kBAA9C;EAEA,IAAIe,OAAO,GAAGI,aAAa,GAAG,IAA9B,EAAoC;IAElCN,OAAO,GAAGQ,mBAAmB,CAACjB,QAAD,EAAW,CAAX,EAAcC,CAAd,CAA7B;IACAS,QAAQ,GAAGO,mBAAmB,CAACjB,QAAD,EAAWE,KAAX,EAAkBD,CAAlB,CAA9B;EACD,CAJD,MAIO;IAELQ,OAAO,GAAGL,SAAS,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAASC,YAAT,CAAnB;IACAK,QAAQ,GAAGN,SAAS,CAAC,CAACF,KAAD,EAAQ,CAAR,CAAD,EAAaG,YAAb,CAApB;EACD;EAED,OAAO,CAACE,UAAD,EAAaC,WAAb,EAA0BE,QAA1B,EAAoCD,OAApC,CAAP;AACD;AAQD,SAASQ,mBAAT,CAA6BjB,QAA7B,EAAuCkB,CAAvC,EAA0CZ,OAA1C,EAAmD;EACjD,MAAM;IAACa;EAAD,IAA4BnB,QAAlC;EACA,MAAMoB,MAAM,GAAGzB,eAAe,CAACwB,uBAAD,EAA0B,CAACD,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1B,CAA9B;EACA,MAAMG,MAAM,GAAG1B,eAAe,CAACwB,uBAAD,EAA0B,CAACD,CAAD,EAAIlB,QAAQ,CAACG,MAAb,EAAqB,CAArB,EAAwB,CAAxB,CAA1B,CAA9B;EAEA,MAAMF,CAAC,GAAGK,OAAO,GAAGN,QAAQ,CAACsB,cAAT,CAAwBC,aAAxB,CAAsC,CAAtC,CAApB;EACA,MAAMC,CAAC,GAAG,CAACvB,CAAC,GAAGmB,MAAM,CAAC,CAAD,CAAX,KAAmBC,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAArC,CAAV;EACA,MAAMK,KAAK,GAAG/B,IAAI,CAACgC,IAAL,CAAU,EAAV,EAAcN,MAAd,EAAsBC,MAAtB,EAA8BG,CAA9B,CAAd;EAEA,MAAMG,MAAM,GAAGlC,aAAa,CAACgC,KAAD,CAA5B;EACAE,MAAM,CAAC,CAAD,CAAN,GAAYrB,OAAZ;EACA,OAAOqB,MAAP;AACD","names":["worldToLngLat","vec2","transformVector","DEGREES_TO_RADIANS","Math","PI","getBounds","viewport","z","width","height","unproject","unprojectOps","targetZ","bottomLeft","bottomRight","topLeft","topRight","halfFov","fovy","atan","altitude","angleToGround","pitch","unprojectOnFarPlane","x","pixelUnprojectionMatrix","coord0","coord1","distanceScales","unitsPerMeter","t","coord","lerp","result"],"sources":["../../src/get-bounds.js"],"sourcesContent":["import {worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nimport {transformVector} from './math-utils';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * Returns the quad at the intersection of the frustum and the given z plane\n * @param {WebMercatorViewport} viewport\n * @param {Number} z - elevation in meters\n */\nexport default function getBounds(viewport, z = 0) {\n  const {width, height, unproject} = viewport;\n  const unprojectOps = {targetZ: z};\n  const bottomLeft = unproject([0, height], unprojectOps);\n  const bottomRight = unproject([width, height], unprojectOps);\n  let topLeft;\n  let topRight;\n\n  const halfFov = viewport.fovy\n    ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS\n    : Math.atan(0.5 / viewport.altitude);\n  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS;\n  // The top plane is parallel to the ground if halfFov == angleToGround\n  if (halfFov > angleToGround - 0.01) {\n    // intersect with the far plane\n    topLeft = unprojectOnFarPlane(viewport, 0, z);\n    topRight = unprojectOnFarPlane(viewport, width, z);\n  } else {\n    // intersect with the top plane\n    topLeft = unproject([0, 0], unprojectOps);\n    topRight = unproject([width, 0], unprojectOps);\n  }\n\n  return [bottomLeft, bottomRight, topRight, topLeft];\n}\n\n/*\n * Find a point on the far clipping plane of the viewport\n * @param {WebMercatorViewport} viewport\n * @param {Number} x - projected x in screen space\n * @param {Number} targetZ - the elevation of the point in meters\n */\nfunction unprojectOnFarPlane(viewport, x, targetZ) {\n  const {pixelUnprojectionMatrix} = viewport;\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, 0, 1, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, viewport.height, 1, 1]);\n\n  const z = targetZ * viewport.distanceScales.unitsPerMeter[2];\n  const t = (z - coord0[2]) / (coord1[2] - coord0[2]);\n  const coord = vec2.lerp([], coord0, coord1, t);\n\n  const result = worldToLngLat(coord);\n  result[2] = targetZ;\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}